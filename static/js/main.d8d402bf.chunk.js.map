{"version":3,"sources":["component/navbar.js","articles/article.js","msguser/msguser.js","serviceWorker.js","index.js","App.js"],"names":["Navbar","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","activeClassName","React","Component","Article","props","state","articlesList","$","ajax","url","contentType","success","data","this","setState","JSON","parse","error","e","console","log","message","MsgUser","Boolean","window","location","hostname","match","ReactDOM","render","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAwBeA,E,iLAnBP,OACI,yBAAKC,UAAU,iDACX,kBAAC,IAAD,CAASC,GAAG,IAAID,UAAU,gBAA1B,UACA,4BAAQA,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,sBAAsBC,gBAAc,qBAAqBC,gBAAc,QAAQC,aAAW,qBAC1K,0BAAMP,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2BQ,GAAG,sBACzC,yBAAKR,UAAU,cAEP,kBAAC,IAAD,CAASC,GAAG,WAAWD,UAAU,oBAAoBS,gBAAgB,UAArE,YACA,kBAAC,IAAD,CAASR,GAAG,WAAWD,UAAU,oBAAoBS,gBAAgB,UAArE,mB,GAZPC,IAAMC,WCANC,E,YACjB,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAM,CACPC,aAAa,IAHH,E,iFAOdC,IAAEC,KAAK,CACHC,IAAK,wDACLhB,KAAM,MACNiB,YAAY,OACZC,QAAS,SAASC,GAEhBC,KAAKC,SAAS,CACVR,aAAaS,KAAKC,MAAMJ,MAG9BK,MAAO,SAASC,GAEdC,QAAQC,IAAIF,EAAEG,c,+BAKpB,OACI,4C,GA1ByBpB,IAAMC,WCDtBoB,E,iLAEb,OACI,4C,GAHyBrB,IAAMC,WCUvBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,mBCGD,WACb,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,YAAY,kBAAC,EAAD,OACxB,kBAAC,IAAD,CAAOA,KAAK,YAAW,kBAAC,EAAD,YDVjB,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d8d402bf.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink} from 'react-router-dom';\r\n\r\nclass Navbar extends React.Component{\r\n    render(){\r\n        return(\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                <NavLink to=\"/\" className=\"navbar-brand\" >Navbar</NavLink>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n                    <div className=\"navbar-nav\">\r\n                      \r\n                            <NavLink to=\"/article\" className=\"nav-item nav-link\" activeClassName=\"active\">Articles</NavLink>\r\n                            <NavLink to=\"/msguser\" className=\"nav-item nav-link\" activeClassName=\"active\">MsgUsers</NavLink>\r\n                        \r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport $ from 'jquery';\r\n\r\nexport default class Article extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            articlesList:[]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        $.ajax({\r\n            url: 'http://bookshop.srrstechnologies.ml/api/articles.json',\r\n            type: 'GET',\r\n            contentType:'JSON',\r\n            success: function(data) {\r\n              //called when successful\r\n              this.setState({\r\n                  articlesList:JSON.parse(data)\r\n              })\r\n            },\r\n            error: function(e) {\r\n              //called when there is an error\r\n              console.log(e.message);\r\n            }\r\n          });\r\n    }\r\n    render(){\r\n        return(\r\n            <h2>Articles</h2>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class MsgUser extends React.Component{\r\n    render(){\r\n        return(\r\n            <h2>MsgUsers</h2>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; \nimport 'bootstrap/dist/css/bootstrap.css';\nimport $ from 'jquery';\nimport 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.js';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams\n} from \"react-router-dom\";\nimport Navbar from \"./component/navbar\";\nimport Article from './articles/article';\nimport MsgUser from './msguser/msguser';\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <Navbar/>\n        <Switch>\n          <Route path=\"/article\" ><Article/></Route>\n          <Route path=\"/msguser\"><MsgUser/></Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n"],"sourceRoot":""}